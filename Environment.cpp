#include "Environment.h"

void grass::setHasEaten() {
    hasEaten = true;
}

void grass::draw() {
    sf::RectangleShape shape_g(sf::Vector2f(2, 2));
    char grass_fresh[13][14] = {
{'0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0'},
{'0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0'},
{'0', '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0'},
{'0', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '0'},
{'0', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '1', '0', '0'},
{'1', '2', '1', '0', '0', '1', '2', '1', '0', '1', '1', '1', '0', '0'},
{'1', '2', '1', '0', '0', '1', '2', '2', '0', '2', '1', '1', '0', '0'},
{'1', '3', '1', '0', '0', '1', '2', '2', '0', '2', '2', '1', '1', '0'},
{'1', '2', '1', '0', '0', '1', '2', '2', '0', '0', '2', '1', '2', '0'},
{'0', '1', '1', '1', '1', '1', '2', '2', '1', '1', '2', '2', '1', '0'},
{'0', '1', '1', '1', '1', '1', '2', '2', '1', '1', '2', '2', '2', '0'},
{'0', '1', '1', '2', '1', '1', '1', '1', '2', '2', '2', '2', '2', '0'},
{'0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0'} };
    char grass_normal[13][14] = {
{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0'},
{'0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '1', '0', '0', '0'},
{'0', '0', '1', '0', '0', '1', '2', '0', '0', '2', '2', '1', '0', '0'},
{'0', '0', '1', '0', '0', '1', '2', '2', '0', '0', '2', '1', '0', '0'},
{'0', '0', '1', '1', '1', '1', '2', '2', '1', '1', '2', '2', '0', '0'},
{'0', '0', '1', '1', '1', '1', '2', '2', '1', '1', '2', '2', '0', '0'},
{'0', '0', '1', '2', '1', '1', '1', '1', '2', '2', '2', '2', '0', '0'},
{'0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0'} };
    char grass_dying[13][14] = {
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '2', '0', '0', '0'},
    {'0', '0', '0', '0', '0', '1', '2', '0', '1', '0', '2', '0', '0', '0'},
    {'0', '0', '0', '0', '1', '1', '2', '0', '1', '1', '2', '0', '0', '0'},
    {'0', '0', '0', '2', '1', '1', '1', '0', '2', '2', '2', '2', '0', '0'},
    {'0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0'} };

    sf::RectangleShape grass;

    if (age > 500) {
        shape_g.setFillColor(sf::Color(0, 144, 0));
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 14; j++) {
                if (grass_fresh[i][j] != '0') {
                    shape_g.setPosition(x + j * 2, y + i * 2);
                    world.window->draw(shape_g);
                }
            }
        }
    }

    else if (250 < age && age <= 500) {
        shape_g.setFillColor(sf::Color(90, 144, 0));
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 14; j++) {
                if (grass_normal[i][j] != '0') {
                    shape_g.setPosition(x + j * 2, y + i * 2);
                    world.window->draw(shape_g);
                }
            }
        }
    }
    else{
        shape_g.setFillColor(sf::Color(102, 51, 0));
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 14; j++) {
                if (grass_dying[i][j] != '0') {
                    shape_g.setPosition(x + j * 2, y + i * 2);
                    world.window->draw(shape_g);
                }
            }
        }
    }
}

void grass::minus_age() {
    age--;
}

//debug ¿ëµµ
int grass::getAge() {
    return age;
}

void grass::isDead(vector<grass>& grasses, std::vector<grass>::iterator& iter) {
    if (hasEaten || age < 0) {
        iter = grasses.erase(iter);
    }
    else {
        ++iter;
    }
}
void createGrass(vector<grass>& grasses) {
    int age = 500 + rand() % 500;
    grasses.push_back(grass(rand() % 1200, rand() % 800, age));
}